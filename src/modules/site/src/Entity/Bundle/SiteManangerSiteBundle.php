<?php

namespace Drupal\site\Entity\Bundle;

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\site\ApiClient;
use Drupal\site\Entity\SiteEntity;
use Drupal\site\Entity\SiteType;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\RequestException;
use Symfony\Component\Validator\ConstraintViolation;

/**
 * A bundle class for site entities.
 */
class SiteManangerSiteBundle extends DrupalSiteBundle {

  public static function bundleFieldDefinitions(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions)
  {
    $fields = parent::bundleFieldDefinitions($entity_type, $bundle, $base_field_definitions);
    $fields += DrupalSiteBundle::bundleFieldDefinitions($entity_type, $bundle, $base_field_definitions);
    return $fields;
  }

  public function save()
  {
    // If this a site manager and $_GET['manager_of'] is set, update site entity to match uuid.

    return parent::save(); // TODO: Change the autogenerated stub
  }

  /**
   * @return \Drupal\Core\Entity\EntityConstraintViolationList|\Drupal\Core\Entity\EntityConstraintViolationListInterface
   */
  public function validate()
  {
    $this->violations = parent::validate();

    // If this is a site manager site editing itself, return.
    if ($this->isSelf()) {
      return $this->violations;
    }

    // If no API uri is set, set it from site_uri.
    if (empty($this->api_url->value)) {
      $this->set('api_url', $this->site_uri->value);
    }

    try {
      $client = new Client([
        'allow_redirects' => TRUE,
      ]);

      $options = [
        'headers' => [
          'Accept' => 'application/vnd.api+json',
          'Content-type' => 'application/vnd.api+json',
          'api-key' => $this->api_key->value ?? '',
          'requester' => \Drupal::request()->getHost(),
        ],
      ];

      // Get JSON API url
      $url = $this->api_url->value . '/jsonapi/self';
      $response = $client->get($url, $options);
      $json_api_response = Json::decode($response->getBody()->getContents());

      // Set local site UUID to match remote.
      if (!empty($json_api_response['data']['id'])) {
        $this->set('uuid', $json_api_response['data']['id']);
      }
//
//      // If site manager returns 'requester.site_entity', there is a site entity
//      // for the currently running site.
//      if (
//        !empty($json_api_response['requester']['site_entity'])
//        && $json_api_response['requester']['site_entity'] == \Drupal::request()->getHost()
//      ) {
//        // Update site.self with this uuid.
//        $self = \Drupal::get('site.self')->getEntity();
//        $self
//          ->set('uuid', $json_api_response['requester']['site_entity']['attributes']['uuid'])
//          ->save();
//
//        \Drupal::logger()->notice(t('Site Entity UUID updated from remote Site API record for {site}', [
//          'site' => $self->toUrl(),
//        ]));
//        dsm($self, 'saved');
//      }
//      else {
//        dsm($json_api_response, 'no site entity');
//      }


    }
    catch (ClientException $e) {

      if ($e->getCode() == 403) {
        $messages[] = t('Access Denied. Check your API key and try again: @message', ['@message' => $e->getMessage()]);
      }
      elseif ($e->getCode() == 404) {
        $messages[] = t('Site Manager not found. Check the URLs and try again: @message', ['@message' => $e->getMessage()]);
      }
      else {
        $messages[] = t('There was a problem when connecting to Site Manager: @message', ['@message' => $e->getMessage()]);
      }

      $json_api_response = Json::decode($e->getResponse()->getBody()->getContents());
      if (is_array($json_api_response)) {
        $messages += SiteEntity::formatJsonApiErrors($json_api_response);
      }

      $this->addViolation(implode(PHP_EOL, $messages));
    }
    catch (RequestException $e) {
      $this->addViolation(t('There was a problem when connecting to Site Manager: @message', ['@message' => $e->getMessage()]));
    }
    return $this->violations;
  }

  protected function addViolation($message) {
    $this->violations->add(new ConstraintViolation($message,'', [], null, '', null));
  }

}
