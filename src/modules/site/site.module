<?php

/**
 * @file
 * Primary module hooks for Site module.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Serialization\Yaml;
use Drupal\Core\Url;
use Drupal\site\Entity\Site;
use Drupal\site\Entity\SiteEntity;
use Drupal\site\Entity\SiteType;
use Drupal\user\UserInterface;
use Drupal\site\Entity\SiteDefinition;
use Jfcherng\Diff\DiffHelper;

/**
 * Implements hook_help().
 */
function site_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {

    case 'entity.site.add_form':
      $type = $route_match->getParameter('site_type');
      $help = $type->getHelp();
      return (!empty($help) ? Xss::filterAdmin($help) : '');

    case 'entity.site.edit_form':
      $site = $route_match->getParameter('site');
      $type = SiteType::load($site->bundle());
      $help = $type->getHelp();
      return (!empty($help) ? Xss::filterAdmin($help) : '');

    case 'entity.node.edit_form':
      $node = $route_match->getParameter('node');
      $type = NodeType::load($node->getType());
      $help = $type->getHelp();
      return (!empty($help) ? Xss::filterAdmin($help) : '');

    case 'node.add':
      $type = $route_match->getParameter('node_type');
      $help = $type->getHelp();
      return (!empty($help) ? Xss::filterAdmin($help) : '');


  }
}

/**
 * Implements hook_rebuild()
 *
 * Similar to hook_cache_flush() but after all data is rebuilt.
 * That way we can generate a new report with new data.
 */
function site_rebuild() {
  if (\Drupal::config('site.settings')->get('save_on_cache_rebuild')) {
    $entity = \Drupal::service('site.self')->saveEntity(t('Caches cleared at :url by ":user" (:ip)', [
      ':user' => \Drupal::currentUser()->getDisplayName(),
      ':url' => \Drupal::request()->getUri(),
      ':ip' => \Drupal::request()->getClientIp(),
    ]));
    if ($entity) {
      \Drupal::messenger()->addStatus(t('Site report <a href=":url">%name</a> was saved.', [
        ':url' => $entity->toUrl()->toString(),
        '%name' => $entity->label(),
      ]));
    }
  }
}

/**
 * Implements hook_theme().
 */
function site_theme() {
  return [
    'site' => [
      'render element' => 'elements',
    ],
    'drupal_project' => [
      'render element' => 'elements',
    ],
    'site_definition' => [
      'render element' => 'elements',
    ],
    'views_view_unformatted__sites__page_1' => [
      'template' => 'views-view-unformatted',
      'base hook' => 'view'
    ],
  ];
}

/**
 * Implements hook_toolbar().
 */
function site_toolbar() {
  $user = \Drupal::currentUser();

  $items = [];
  $items['site'] = [
    '#cache' => [
      'contexts' => [
        'user.permissions',
      ],
    ],
  ];

  if ($user->hasPermission('access site status')) {

    $site = \Drupal::service('site.self')->getEntity();

    $items['site'] += [
      '#type' => 'toolbar_item',
      '#wrapper_attributes' => [
        'class' => ['edit-site-toolbar'],
      ],
      'tab' => [
        '#type' => 'link',
        '#title' => $site->stateName(),
        '#url' => Url::fromRoute('site.about'),
        '#attributes' => [
          'title' => t(':state', [
            ':state' => $site->stateName(),
          ]),
          'class' => ['toolbar-icon', 'toolbar-icon-site', $site->stateClass(), 'edit-site-toolbar'],
        ],
      ],
      '#weight' => 10000,
      '#attached' => [
        'library' => [
          'site/site',
        ],
      ],
    ];
  }
  return $items;
}

/**
 * Prepares variables for site templates.
 *
 * Default template: site.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the site information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_site(array &$variables) {
  /** @var SiteEntity $site */
  $site = $variables['elements']['#site'];
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Build something nice.
  $build = [
    '#type' => 'fieldset',
//    '#title' => $site->id() ? $site->toLink()->toString() : t('Current Status'),
    '#weight' => -1000,
    '#attributes' => [
      'class' => [
        'site-display',
        'site-full'
      ]
    ]
  ];

  if (\Drupal::routeMatch()->getRouteName() == 'entity.site.canonical' || \Drupal::routeMatch()->getRouteName() == 'entity.site.revision') {
    $date_time = $site->revision_timestamp->view([
      'label' => 'hidden',
      'settings' => [
      ]
    ]);

    $changed = [

    ];

    $changed['changed'] = [
      '#type' => 'fieldset',
      '#title' => t('Site Report saved on @date', [
        '@date' => \Drupal::service('renderer')->render($date_time),
      ]),
      '#attributes' => ['class' => ['color-info', 'site-timestamp']],
      'field' => $site->revision_timestamp->view([
        'type'=> 'timestamp_ago',
        'label' => 'hidden',
        'settings' => [
        ]
      ])
    ];
    $changed['changed']['field']['#attributes']['class'][] = 'timestamp-ago';

    $changed['changed']['log'] = [
      '#type' => 'html_tag',
      '#tag' => 'blockquote',
      '#access' => (bool) $site->revision_log->value
    ];
    $changed['changed']['log']['revision_log'] = $site->revision_log->view([
      'type'=> 'timestamp_ago',
      'label' => 'hidden',
      'settings' => [
      ]
    ]);
    $changed['changed']['config_changes'] = site_config_changes_build($site);


    $changed['changed']['data'] = [
      '#type' => 'details',
      '#title' => t('Site Data'),
    ];
    $changed['changed']['data']['#attributes']['class'][] = 'color-info';

    $changed['changed']['data']['data'] = [
      '#value' => \Drupal\Component\Serialization\Yaml::encode($site->get('data')->getValue(), 2,4),
      '#type' => 'html_tag',
      '#tag' => 'pre',
    ];



    $build['#suffix'] = \Drupal::service('renderer')->render($changed);

//
//    $build['changed'] = [
//      '#type' => 'fieldset',
//    ];
//    $build['changed']['#attributes']['class'][] = 'color-info';
//
//    $build['changed']['note'] = [
//      ''
//    ];
//    $build['changed']['field'] = $site->revision_timestamp->view([
//      'type'=> 'timestamp_ago',
//      'label' => 'inline',
//      'settings' => [
//      ]
//    ]);
//    $build['changed']['field']['#title'] = t('Report generated');

  }
  $build['header'] =[
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => [
      'class' => [
        'site-entity-header'
      ]
    ],
  ];
  $build['header']['title'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => [
      'class' => [
        'site-title'
      ]
    ],
  ];
  $build['header']['title']['link'] = $site->id() ? $site->toLink()->toRenderable() : Link::createFromRoute(SiteEntity::getUri(), 'site.about')->toRenderable();
  $build['header']['title']['link']['#attributes']['class'][] = 'action-link';

  $build['header']['actions'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => [
      'class' => [
        'site-operations'
      ]
    ]
  ];
  $build['header']['actions']['operations'] = [
    '#type' => 'operations',
    '#links' => $site->getOperations(),
  ];


  $build['site_subheader'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => [
      'class' => [
        'site-subheader'
      ]
    ],
  ];

  $build['site_subheader']['type'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => [
      'class' => [
        'site-type'
      ]
    ],
    'type' => $site->site_type->view([
      'label' => 'hidden',
    ]),
  ];

  if ($site->isSelf()) {
    $build['site_subheader']['self'] = [
      '#type' => 'html_tag',
      '#tag' => 'em',
      '#attributes' => [
        'class' => [
          'site-self'
        ],
        'title' => t('This is the current website.'),
      ],
      '#value' => t('Self'),
    ];
  }

  if ($site->isCanonical()) {
    $note = t('This is the canonical environment for Drupal project :project.', [
      ':project' => $site->drupal_project->entity->label(),
    ]);
    $build['header']['title']['link']['#attributes']['title'] = $note;
    $build['header']['title']['link']['#attributes']['class'][] = 'canonical-site';

    if ($variables['view_mode'] != 'teaser') {
      $build['header']['title']['link']['#attributes']['class'][] = 'action-link--icon-show';
    }

    $build['site_subheader']['canonical'] = [
      '#type' => 'html_tag',
      '#tag' => 'em',
      '#attributes' => [
        'class' => [
          'site-canonical'
        ],
        'title' => $note,
      ],
      '#value' => t('Canonical'),
    ];
  }

  if (!empty($site->drupal_project->entity)) {
    $build['site_subheader']['drupal_project'] =  $site->drupal_project->view([
      'label' => 'hidden',
    ]);
    $build['site_subheader']['drupal_project'][0]['#attributes']['title'] = t('Drupal Project');
  }

  $build['urls'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => [
      'class' => [
        'site-urls'
      ]
    ],
  ];

  $build['urls']['urls'] = [
    '#type' => 'fieldset',
  ];

  $build['urls']['urls']['list'] = [
    '#theme' => 'item_list',
  ];

  foreach ($site->site_uri as $site_uri) {
    $link =  $site_uri->view();
    $link['#attributes']['target'] = '_blank';
    $link['#attributes']['class'][] = 'action-link';
    $link['#attributes']['class'][] = 'action-link--icon-show';
    $build['urls']['urls']['list']['#items'][] = $link;
  }

  $site_view_page = \Drupal::routeMatch()->getRouteName() == 'entity.site.canonical' || \Drupal::routeMatch()->getRouteName() == 'site.about' || \Drupal::routeMatch()->getRouteName() == 'entity.site.revision';

  $build['content'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => [
      'class' => [
        'site-content'
      ]
    ],
  ];
  $build['content'] += $variables['content'] ?? [];

  // Composer Info
  if ($site->composer_json && $site->composer_json->get(0) && $variables['view_mode'] != 'teaser') {
    $build['composer'] = [
      '#description' => t('Loaded from composer.json'),
      '#type' => 'details',
    ];
    $build['composer']['#title']['label'] = [
      '#markup' => t('Site Information'),
    ];

    $composer = $site->composer_json->get(0)->getValue();
    $build['composer']['#title']['project'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => [
        'class' => [
          'composer-info-name'
        ],
        'title' => t('Data read from composer.json'),
      ]
    ];
    $build['composer']['#title']['project']['composer'] = [
      '#type' => 'item',
      '#title' => $composer['name'] ?? t('No "name" found in composer.json.'),
      '#markup' => $composer['description'] ?? t('No "description" found in composer.json.'),
      '#attributes' => [
        'class' => ['composer-info-name'],
      ],
    ];
    if (!empty($composer['homepage'])) {
      $link = Link::fromTextAndUrl($composer['homepage'], Url::fromUri($composer['homepage']))->toRenderable();
      $link['#attributes']['target'] = '_blank';
      $build['composer']['homepage'] = [
        '#type' => 'item',
        '#title' => t('Homepage'),
        'site_link' => $link,
      ];
    }
    if (!empty($composer['support'])) {
      foreach ($composer['support'] as $name => $url) {
        $link = Link::fromTextAndUrl($name, Url::fromUri($url))->toRenderable();
        $link['#attributes']['target'] = '_blank';
        $support_links[] = $link;
      }
      $build['composer']['support'] = [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => [
          'class' => [
            'composer-info-name'
          ],
          'title' => t('Data read from composer.json'),
        ]
      ];
      $build['composer']['support'] = [
        '#title' => t('Support'),
        '#type' => 'item',
        '#attributes' => [
          'class' => ['composer-info-support'],
        ],
        'links' => [
          '#theme' => 'item_list',
          '#items' => $support_links,
        ],
      ];
    }
  }

  if ($variables['view_mode'] == 'about') {

  }
  else {
    $build['state_widget'] = $site->state->view([
      'label' => 'hidden',
      'type' => 'site_state',
      'settings' => [
        'show_reason' =>  true,
        'reason_open' => $site_view_page,
      ]
    ]);

    $build['state_widget']['#attributes']['class'][] = 'color-' . $site->stateClass();
  }
  $variables['content'] = [
    'build' => $build
  ];

  if ($variables['view_mode'] == 'teaser') {
    template_preprocess_site_widget($variables);
  }
}

/**
 * Alters the site build array for "teaser" display.
 *
 * This should probably be a single directory component or whatever.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the site information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_site_widget(array &$variables)
{
  $build = &$variables['content']['build'];
  $site = $variables['elements']['#site'];


  $build['#attributes']['class'] = ['site-display', 'site-widget'];
  $build['header']['title']['#attributes']['class'][] = 'color-' . $site->stateClass();
  $build['header']['title']['link']['#prefix'] = "<em class='icon'></em>";


  unset($build['site_subheader']);
  unset($build['content']);
  unset($build['urls']);
  unset($build['state_widget']);
}

/**
 * Prepares variables for site templates.
 *
 * Default template: site.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the site information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_drupal_project(array &$variables)
{
  /** @var DrupalProject $project */
  $project = $variables['elements']['#drupal_project'];
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }


  $variables['content']['drupal_site_name'][0]['operations'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => ['class' => 'site-operations'],
    'operations' => [
      '#type' => 'operations',
      '#links' => $project->getOperations(),
    ],
  ];

  if (!empty($project->canonical_url->getValue())) {
    $variables['content']['drupal_site_name'][0]['url'] = $project->canonical_url->view([
      'label' => 'hidden',
    ]);
  }
  else {
    $variables['content']['drupal_site_name'][0]['url'] = [
      '#type' => 'html_tag',
      '#tag' => 'em',
      '#content' => t('There is no canonical URL set for this project.'),
    ];
  }

  $variables['attributes']['class'][] = 'drupal-project';
  $variables['attributes']['class'][] = $variables['view_mode'];

  // If teaser, wrap with a box.
  if ($variables['view_mode'] == 'teaser') {

    if (!empty($variables['content']['drupal_project_environments_entity_view_1'])){
      $variables['content']['drupal_project_environments_entity_view_1'] = [
        '#weight' => 10,
        '#type' => 'container',
        '#attributes' => ['class' => 'field drupal_project_environments_entity_view_1'],
        'field' => $variables['content']['drupal_project_environments_entity_view_1'],
      ];
    }
    $variables['content'] = [
      'content' => $variables['content'],
      '#type' => 'fieldset',
    ];
  }
}
/**
 * Widget for config diff.
 * @param $entity
 * @return array
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function site_config_changes_build($entity) {
  $build = [];
  // Show config changes.
  $data = $entity->get('data')->first() ? $entity->get('data')->first()
    ->getValue(): [];
  if (!empty($data['config_changes'])) {
    $build['config_changes'] = [
      '#title' => t('Config Changes'),
      '#type' => 'details',
      '#attributes' => ['class' => ['color-info']]
    ];

    foreach ($data['config_changes'] as $config_item => $config_changes) {
      $build['config_changes'][$config_item] = [
        '#type' => 'item',
        '#title' => $config_item,
      ];
      $original = Yaml::encode($config_changes['original'], 2, 4);
      $original_lines = explode(PHP_EOL, $original);

      $new = Yaml::encode($config_changes['new'], 2, 4);
      $new_lines = explode(PHP_EOL, $new);

      $formatter = \Drupal::service('diff.formatter');
      $formatter->leading_context_lines = 0;
      $formatter->trailing_context_lines = 0;
      $diff = new \Drupal\Component\Diff\Diff($original_lines, $new_lines);
      $account = user_load_by_name($config_changes['user']);
      $view = $entity->revision_timestamp->view([
        'label' => 'hidden'
      ]);
      $date = \Drupal::service('renderer')->render($view[0]);

      $build['config_changes'][$config_item]['table'] = [
        '#attached' => [
          'library' => ['system/diff']
        ],
        '#type' => 'table',
        '#attributes' => [
          'class' => [
            'diff',
          ],
        ],
        '#header' => [
          [
            'data' => t('Before'),
            'colspan' => '2',
          ],
          [
            'data' => t('After'),
            'colspan' => '2',
          ],
        ],
        '#rows' => $formatter
          ->format($diff),
        '#empty' => t('No changes'),
      ];
    }

    $build['config_changes']['#description'] = t('Changes made by @user (:ip) at @url on @date.', [
      '@user' => $account ? $account->toLink()->toString() :
        $config_changes['user'] . ' (no user found)',
      ':ip' => $config_changes['ip'],
      '@url' => Link::fromTextAndUrl($config_changes['url'], Url::fromUri($config_changes['url']))->toString(),
      '@date' => $date
    ]);
  }

  return $build;
}

/**
 * @return void
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function site_cron() {
  $now = \Drupal::time()->getRequestTime();
  $settings = \Drupal::config('site.settings')->get();

  foreach (['save', 'send'] as $action) {
    $state_name = "site.cron_last_{$action}";
    $interval = $settings["{$action}_interval"];

    // If enabled, and its the first time OR due for an update...
    $last_cron = \Drupal::state()->get($state_name, 0);
    $first_time = $last_cron == 0;
    $time_since_last_cron = $first_time? 0: $now - $last_cron;
    if ($interval > 0 && ($first_time || $time_since_last_cron > $interval)) {

      if ($action == 'save') {
        \Drupal::service('site.self')->saveEntity(t('Site report saved on cron.'));
      }
      else {
        \Drupal::service('site.self')->saveEntity(t('Site report sent on cron.'));
      }

      \Drupal::state()->set($state_name, $now);
    }
  }
}

/**
 * Implements hook_ENTITY_view()
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 * @param $view_mode
 * @return void
 */
function site_site_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  $build['#attached'] = [
    'library' => [
      'site/site',
    ],
  ];
}

/**
 * Prepares variables for views table templates.
 *
 * Default template: views-view-table.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: A ViewExecutable object.
 *   - rows: The raw row data.
 */
function site_preprocess_views_view_table(&$variables) {

  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  if ($view->storage->get('base_table') == 'operations_site' ||
    $view->storage->get('base_table') == 'operations_site_revision') {
    foreach ($variables['result'] as $i => $result_row) {

      /** @var \Drupal\views\ResultRow $result_row */
      if ($result_row->_entity->get('state')) {
        /** @var \Drupal\Core\Template\Attribute $attributes */
        $attributes = $variables['rows'][$i]['attributes'];
        $attributes->setAttribute('class',
          'color-' . $result_row->_entity->stateClass());

        $variables['rows'][$i]['attributes'] = $attributes;
      }
    }
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function site_entity_bundle_info_alter(array &$bundles): void {

  if (isset($bundles['site']['default'])) {
    $bundles['site']['default']['class'] = \Drupal\site\Entity\Bundle\DefaultSiteBundle::class;
  }
  if (isset($bundles['site']['drupal'])) {
    $bundles['site']['drupal']['class'] = \Drupal\site\Entity\Bundle\DrupalSiteBundle::class;
  }
  if (isset($bundles['site']['site_manager'])) {
    $bundles['site']['site_manager']['class'] = \Drupal\site\Entity\Bundle\SiteManangerSiteBundle::class;
  }
}


/**
 * Replacement for bundleFieldDefinitions() on classes.
 *
 * This loads earlier than that. Defining them here allows bundles to override.
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 * @param $bundle
 * @param array $base_field_definitions
 * @return array
 */
function site_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $fields = [];
  $entity_class = $entity_type->getClass();
  if (method_exists($entity_class, 'propertyFieldDefinitions')) {
    $fields = $entity_class::propertyFieldDefinitions($entity_type, $bundle, $base_field_definitions);
    foreach ($fields as $field) {
      \Drupal::service('field_definition.listener')->onFieldDefinitionCreate($field);
    }
  }
  return $fields;

}

/**
 * Implements hook_entity_field_storage_info().
 *
 * This only defines storage, so we want to load all fields from all bundles.
 *
 * Then, we can use bundleFieldDefinitions()?
 */
function site_entity_field_storage_info(\Drupal\Core\Entity\ContentEntityTypeInterface $entity_type) {

  $entity_class = $entity_type->getClass();
  if (method_exists($entity_class, 'allPropertyFieldDefinitions')) {
    $fields = $entity_class::allPropertyFieldDefinitions($entity_type);
    return $fields;
  }
}
